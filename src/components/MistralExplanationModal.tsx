'use client';

import React, { useState, useEffect, useRef } from 'react';
import { Chart, registerables } from 'chart.js';
import { FaLightbulb, FaChartBar, FaFileAlt, FaTimes as XIcon } from 'react-icons/fa';

// Register Chart.js components
Chart.register(...registerables);

interface MistralExplanationModalProps {
    isOpen: boolean;
    onClose: () => void;
    explanation: any;
    loading: boolean;
    progress?: { progress: number; message: string } | null;
}

// Feature name display mapping
const featureDisplayNames: Record<string, string> = {
    'revenueGrowth': 'revenueGrowth',
    'netIncomeGrowth': 'netIncomeGrowth',
    'currentRatio': 'currentRatio',
    'debtToEquity': 'debtToEquity',
    'returnOnEquity': 'returnOnEquity',
    'peRatio': 'peRatio',
    'priceToBookRatio': 'priceToBookRatio',
    'dividendYield': 'dividendYield',
    'operatingMargin': 'operatingMargin',
    'netMargin': 'netMargin'
};

const MistralExplanationModal: React.FC<MistralExplanationModalProps> = ({
    isOpen,
    onClose,
    explanation,
    loading,
    progress = null
}) => {
    const [activeTab, setActiveTab] = useState<'shap' | 'summary' | 'recommendation'>('shap');
    const [shapChart, setShapChart] = useState<any>(null);
    const [treeShapChart, setTreeShapChart] = useState<any>(null);
    const [explainMethod, setExplainMethod] = useState<'SHAP' | 'LIME' | 'TreeSHAP'>('TreeSHAP');

    useEffect(() => {
        // Cleanup function
        return () => {
            if (shapChart) {
                shapChart.destroy();
            }
            if (treeShapChart) {
                treeShapChart.destroy();
            }
        };
    }, [shapChart, treeShapChart]);

    // Render chart when modal is opened
    useEffect(() => {
        if (isOpen && explanation && activeTab === 'shap') {
            if (explanation.method === 'LIME' && explainMethod === 'LIME') {
                // LIME method doesn't need special rendering, chart is generated by backend
            } else if (explanation.method === 'TreeSHAP' && explainMethod === 'TreeSHAP') {
                // Render TreeSHAP waterfall chart
                if (explanation.shapValues && explanation.baseValue !== undefined) {
                    renderTreeShapChart();
                }
            } else if (explanation.shapValues && explanation.shapValues.length > 0) {
                // Using traditional SHAP method to render chart, ensure data exists
                renderShapChart();
            }
        }
    }, [isOpen, explanation, activeTab, explainMethod]);

    // Render TreeSHAP waterfall chart
    const renderTreeShapChart = () => {
        const canvas = document.getElementById('treeShapChart') as HTMLCanvasElement;
        if (!canvas) return;

        // Clean up old chart
        if (treeShapChart) {
            treeShapChart.destroy();
        }

        // Ensure explanation, shapValues and baseValue exist
        if (!explanation || !explanation.shapValues || explanation.shapValues.length === 0 ||
            explanation.baseValue === undefined) {
            console.warn('TreeSHAP data is not available and cannot render the waterfall map');
            return;
        }

        // Prepare data
        const shapData = explanation.shapValues;
        const baseValue = explanation.baseValue;
        const finalValue = explanation.finalValue ||
            shapData.reduce((sum: number, item: any) => sum + (item.shapValue || 0), baseValue);

        // Sort features (by absolute impact value in descending order)
        const sortedFeatures = [...shapData].sort((a, b) =>
            Math.abs(b.shapValue) - Math.abs(a.shapValue));

        // Prepare labels (including base value and final prediction)
        const labels = ['Base Value', ...sortedFeatures.map(item =>
            featureDisplayNames[item.feature] || item.feature), 'Final Prediction'];

        // Prepare base value data (only the first position has a value, the rest are 0)
        const baseData = [baseValue, ...Array(sortedFeatures.length + 1).fill(0)];

        // Prepare feature contribution data
        const impactData = [];
        let cumulativeImpact = baseValue;

        // Add a data array for each feature in order
        for (let i = 0; i < sortedFeatures.length; i++) {
            const currentFeature = sortedFeatures[i];
            const impact = currentFeature.shapValue || 0;

            // Create an all-zero array
            const featureData = Array(labels.length).fill(0);
            // Only place impact value at current feature position+1
            featureData[i + 1] = impact;

            impactData.push({
                label: `${currentFeature.feature} contribution`,
                data: featureData,
                backgroundColor: impact >= 0 ? 'rgba(75, 192, 192, 0.6)' : 'rgba(255, 99, 132, 0.6)',
                borderColor: impact >= 0 ? 'rgb(75, 192, 192)' : 'rgb(255, 99, 132)',
                borderWidth: 1,
                stack: 'Stack 0'
            });

            cumulativeImpact += impact;
        }

        // Prepare final prediction data (only the last position has a value, the rest are 0)
        const finalData = Array(labels.length).fill(0);
        finalData[labels.length - 1] = finalValue - cumulativeImpact;

        // Create chart
        const newChart = new Chart(canvas, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Base Value',
                        data: baseData,
                        backgroundColor: 'rgba(200, 200, 200, 0.6)',
                        borderColor: 'rgb(200, 200, 200)',
                        borderWidth: 1,
                        stack: 'Stack 0'
                    },
                    ...impactData,
                    {
                        label: 'Prediction Adjustment',
                        data: finalData,
                        backgroundColor: 'rgba(54, 162, 235, 0.6)',
                        borderColor: 'rgb(54, 162, 235)',
                        borderWidth: 1,
                        stack: 'Stack 0'
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        stacked: true,
                        title: {
                            display: true,
                            text: 'Prediction Value'
                        }
                    },
                    y: {
                        stacked: true
                    }
                },
                plugins: {
                    tooltip: {
                        mode: 'index',
                        intersect: false
                    },
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: 'TreeSHAP Feature Contribution Waterfall Chart'
                    }
                }
            }
        });

        setTreeShapChart(newChart);
    };

    // Render SHAP bar chart
    const renderShapChart = () => {
        const canvas = document.getElementById('shapChart') as HTMLCanvasElement;
        if (!canvas) return;

        // Clean up old chart
        if (shapChart) {
            shapChart.destroy();
        }

        // Ensure explanation and shapValues exist
        if (!explanation || !explanation.shapValues || explanation.shapValues.length === 0) {
            console.warn('SHAP data is not available and cannot render the chart');
            return;
        }

        // Prepare data
        const shapData = explanation.shapValues;
        const chartData = {
            labels: shapData.map((item: any) => featureDisplayNames[item.feature] || item.feature),
            datasets: [{
                label: 'Impact on Recommendation',
                data: shapData.map((item: any) => item.impact),
                backgroundColor: shapData.map((item: any) =>
                    item.impact >= 0 ? 'rgba(75, 192, 192, 0.6)' : 'rgba(255, 99, 132, 0.6)'
                ),
                borderColor: shapData.map((item: any) =>
                    item.impact >= 0 ? 'rgb(75, 192, 192)' : 'rgb(255, 99, 132)'
                ),
                borderWidth: 1
            }]
        };

        // Create chart
        const newChart = new Chart(canvas, {
            type: 'bar',
            data: chartData,
            options: {
                indexAxis: 'y',
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Impact Value (Positive values promote recommendation, negative values reduce recommendation)'
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: (context) => {
                                const index = context.dataIndex;
                                const feature = shapData[index];
                                return `Feature Value: ${feature.value} | Impact: ${feature.impact.toFixed(4)}`;
                            }
                        }
                    }
                }
            }
        });

        setShapChart(newChart);
    };

    // Toggle explanation method
    const toggleExplainMethod = () => {
        setExplainMethod(prev => {
            if (prev === 'SHAP') return 'LIME';
            if (prev === 'LIME') return 'TreeSHAP';
            return 'SHAP';
        });
    };

    // Render highlighted text
    const renderHighlightedText = (textData: any) => {
        if (!textData || !textData.sentences) return null;

        return (
            <div className="mb-4">
                {textData.sentences.map((sentence: any, index: number) => {
                    // Calculate sentence background color - normalize based on score
                    const maxScore = Math.max(...textData.sentences.map((s: any) => s.score));
                    const normalizedScore = maxScore === 0 ? 0 : sentence.score / maxScore;
                    const bgColorIntensity = Math.floor(normalizedScore * 100);

                    return (
                        <div
                            key={index}
                            className="mb-2 p-2 rounded"
                            style={{
                                backgroundColor: `rgba(255, 165, 0, ${normalizedScore.toFixed(2)})`,
                                opacity: 0.3 + normalizedScore * 0.7
                            }}
                            title={`Importance: ${(normalizedScore * 100).toFixed(0)}%`}
                        >
                            {sentence.text}
                        </div>
                    );
                })}
            </div>
        );
    };

    // Render keyword cloud
    const renderWordCloud = (textData: any) => {
        if (!textData || !textData.importantWords) return null;

        return (
            <div className="mt-4">
                <h4 className="font-medium mb-2">Keywords</h4>
                <div className="flex flex-wrap">
                    {textData.importantWords.map((word: any, index: number) => (
                        <span
                            key={index}
                            className="mr-2 mb-2 px-3 py-1 rounded"
                            style={{
                                backgroundColor: `rgba(75, 192, 192, ${word.importance.toFixed(2)})`,
                                fontSize: `${Math.max(0.8, word.importance) * 1.2}rem`
                            }}
                        >
                            {word.word}
                        </span>
                    ))}
                </div>
            </div>
        );
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
                <div className="p-6 bg-gray-100 border-b flex justify-between items-center">
                    <h3 className="text-xl font-semibold text-gray-900 flex items-center">
                        <FaLightbulb className="text-yellow-500 mr-2" />
                        TreeSHAP Model Explanation
                    </h3>
                    <button
                        onClick={onClose}
                        className="text-gray-500 hover:text-gray-700 focus:outline-none"
                    >
                        <XIcon className="h-6 w-6" />
                    </button>
                </div>

                <div className="overflow-y-auto p-6 max-h-[calc(90vh-120px)]">
                    {loading ? (
                        <div className="flex flex-col items-center justify-center p-8">
                            <div className="spinner mb-4"></div>

                            {progress ? (
                                <div className="w-full max-w-md">
                                    <div className="mb-2 flex justify-between">
                                        <span className="text-sm font-medium text-gray-700">{progress.message}</span>
                                        <span className="text-sm font-medium text-gray-700">{progress.progress}%</span>
                                    </div>
                                    <div className="w-full bg-gray-200 rounded-full h-2.5">
                                        <div
                                            className="bg-blue-600 h-2.5 rounded-full transition-all duration-300"
                                            style={{ width: `${progress.progress}%` }}
                                        ></div>
                                    </div>
                                </div>
                            ) : (
                                <p className="text-gray-600">Generating explanation analysis, please wait...</p>
                            )}
                        </div>
                    ) : explanation ? (
                        <div>
                            <div className="bg-blue-50 p-4 rounded-lg mb-6">
                                <h4 className="font-semibold text-blue-900 mb-2">Analysis Method Information</h4>
                                <p className="text-blue-800">Using {explanation.method} method to explain the financial recommendation of the Mistral model</p>
                                {explanation.processingTime && (
                                    <p className="text-sm text-blue-700 mt-1">Processing Time: {(explanation.processingTime / 1000).toFixed(2)} seconds</p>
                                )}
                            </div>

                            {/* SHAP analysis results */}
                            {explanation.shapValues && (
                                <div className="mb-8">
                                    <h4 className="text-lg font-semibold mb-4">Financial Indicator Impact Analysis</h4>
                                    <p className="text-sm text-gray-600 mb-4">
                                        The following chart shows the impact of each financial indicator on the model's recommendation. Positive values indicate a positive impact, while negative values indicate a negative impact.
                                    </p>

                                    <div className="grid gap-3 mb-4">
                                        {explanation.shapValues.map((item: any, index: number) => {
                                            const isPositive = item.shapValue > 0;
                                            return (
                                                <div key={index} className="flex items-center">
                                                    <div className="w-40 text-right pr-3">
                                                        <span className="font-medium">{translateFeatureName(item.feature)}</span>
                                                    </div>

                                                    <div className="flex-1 flex items-center">
                                                        <div className={`h-6 ${isPositive ? 'bg-green-500' : 'bg-red-500'} rounded`}
                                                            style={{
                                                                width: `${Math.min(Math.abs(item.shapValue) * 100, 100)}%`,
                                                                marginLeft: isPositive ? '50%' : `calc(50% - ${Math.min(Math.abs(item.shapValue) * 100, 100)}%)`
                                                            }}>
                                                        </div>
                                                        <span className={`ml-2 ${isPositive ? 'text-green-600' : 'text-red-600'} font-medium`}>
                                                            {item.shapValue > 0 ? '+' : ''}{item.shapValue.toFixed(2)}
                                                        </span>
                                                    </div>
                                                </div>
                                            );
                                        })}
                                    </div>

                                    <div className="bg-gray-50 p-3 rounded mt-2">
                                        <div className="flex justify-between text-sm text-gray-500">
                                            <div>Negative Impact</div>
                                            <div>Neutral</div>
                                            <div>Positive Impact</div>
                                        </div>
                                    </div>
                                </div>
                            )}

                            {/* Base value and prediction value */}
                            {(explanation.baseValue !== undefined || explanation.finalValue !== undefined) && (
                                <div className="mb-8 grid grid-cols-2 gap-4">
                                    {explanation.baseValue !== undefined && (
                                        <div className="bg-gray-50 p-4 rounded-lg">
                                            <h5 className="font-semibold mb-2">Base Score</h5>
                                            <div className="text-2xl font-bold">
                                                {explanation.baseValue.toFixed(2)}
                                            </div>
                                            <p className="text-sm text-gray-600 mt-1">
                                                Base prediction score when features are not considered
                                            </p>
                                        </div>
                                    )}

                                    {explanation.finalValue !== undefined && (
                                        <div className="bg-gray-50 p-4 rounded-lg">
                                            <h5 className="font-semibold mb-2">Final Score</h5>
                                            <div className="text-2xl font-bold">
                                                {explanation.finalValue.toFixed(2)}
                                            </div>
                                            <p className="text-sm text-gray-600 mt-1">
                                                Final prediction score after considering all features
                                            </p>
                                        </div>
                                    )}
                                </div>
                            )}

                            {/* Text analysis */}
                            {explanation.textAnalysis && (
                                <div className="mt-8">
                                    <h4 className="text-lg font-semibold mb-4">
                                        Text Generation Explanation
                                        {explanation.method && explanation.method.includes("Semantic Similarity") && (
                                            <span className="text-sm font-normal text-blue-600 ml-2 px-2 py-1 bg-blue-50 rounded">
                                                Using Semantic Analysis
                                            </span>
                                        )}
                                    </h4>

                                    {/* Summary text analysis */}
                                    {explanation.textAnalysis.summary && (
                                        <div className="mb-8">
                                            <h5 className="font-medium mb-3">Summary Text Analysis</h5>

                                            {/* Original text display - using originalText field */}
                                            <div className="mb-4 p-4 bg-gray-50 border-l-4 border-gray-300 rounded">
                                                <h6 className="text-sm font-medium text-gray-700 mb-2">Original Text:</h6>
                                                <p className="text-gray-800">
                                                    {explanation.textAnalysis.summary.originalText ||
                                                        'No original text content'}
                                                </p>
                                            </div>

                                            <h6 className="text-sm font-medium text-gray-700 mb-3">Important Sentence Analysis:</h6>

                                            {explanation.textAnalysis.summary.sentences &&
                                                explanation.textAnalysis.summary.sentences.slice(0, 5).map((item: any, index: number) => {
                                                    // Calculate importance star rating
                                                    const importanceScore = item.score;
                                                    let stars = "★★★";
                                                    let importanceLabel = "Related";

                                                    if (importanceScore > 2.5) {
                                                        stars = "★★★★★";
                                                        importanceLabel = "Core";
                                                    } else if (importanceScore > 1.5) {
                                                        stars = "★★★★☆";
                                                        importanceLabel = "Very Important";
                                                    } else if (importanceScore > 1.0) {
                                                        stars = "★★★★";
                                                        importanceLabel = "Important";
                                                    }

                                                    // Determine if it's a core sentence based on index
                                                    const isCore = index < 3;

                                                    // Relevance label
                                                    let relevanceLabel = "Medium";
                                                    if (item.centrality > 0.8) relevanceLabel = "Very High";
                                                    else if (item.centrality > 0.6) relevanceLabel = "High";

                                                    return (
                                                        <div
                                                            key={index}
                                                            className={`mb-4 p-4 rounded shadow-sm ${isCore
                                                                ? 'bg-yellow-50 border border-yellow-200'
                                                                : 'bg-gray-50'
                                                                }`}
                                                        >
                                                            <div className="flex justify-between items-start mb-2">
                                                                <div>
                                                                    <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${isCore
                                                                        ? 'bg-yellow-200 text-yellow-800'
                                                                        : 'bg-gray-200 text-gray-700'
                                                                        }`}>
                                                                        {isCore ? `Core Sentence (${importanceLabel})` : `Important Sentence #${index + 1}`}
                                                                    </span>
                                                                    <span className="ml-2 text-yellow-500">{stars}</span>
                                                                </div>

                                                                <div className="text-xs text-gray-500">
                                                                    Theme Relevance: {relevanceLabel}
                                                                </div>
                                                            </div>

                                                            <p className={`text-gray-800 ${isCore ? 'font-medium' : ''}`}>
                                                                {item.text}
                                                            </p>

                                                            <div className="mt-2 flex space-x-2">
                                                                <div className="w-1/2">
                                                                    <div className="text-xs text-gray-500 mb-1">Importance</div>
                                                                    <div className="w-full bg-gray-200 rounded-full h-2">
                                                                        <div
                                                                            className={`h-2 rounded-full ${isCore ? 'bg-yellow-500' : 'bg-blue-500'}`}
                                                                            style={{ width: `${Math.min(importanceScore / 3 * 100, 100)}%` }}
                                                                        ></div>
                                                                    </div>
                                                                </div>

                                                                <div className="w-1/2">
                                                                    <div className="text-xs text-gray-500 mb-1">Theme Relevance</div>
                                                                    <div className="w-full bg-gray-200 rounded-full h-2">
                                                                        <div
                                                                            className="h-2 rounded-full bg-green-500"
                                                                            style={{ width: `${Math.min(item.centrality * 100, 100)}%` }}
                                                                        ></div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    );
                                                })}

                                            {explanation.textAnalysis.summary.importantWords && (
                                                <div className="mt-6 bg-white p-4 rounded-lg border border-gray-200">
                                                    <h6 className="text-sm font-medium text-gray-700 mb-3">Core Word Analysis</h6>
                                                    <div className="flex flex-wrap gap-2">
                                                        {explanation.textAnalysis.summary.importantWords.slice(0, 12).map((word: any, index: number) => {
                                                            // Calculate importance
                                                            const importance = Math.min(word.importance, 1.0);
                                                            const fontSize = 0.8 + (importance * 0.6);
                                                            const colorIntensity = Math.floor(40 + importance * 50);

                                                            return (
                                                                <span
                                                                    key={index}
                                                                    className="inline-block px-3 py-1.5 rounded-full"
                                                                    style={{
                                                                        fontSize: `${fontSize}rem`,
                                                                        fontWeight: importance > 0.6 ? 600 : 400,
                                                                        backgroundColor: `rgba(254, 242, 232, ${importance * 0.8 + 0.2})`,
                                                                        color: `hsl(22, ${colorIntensity}%, 40%)`,
                                                                        border: importance > 0.7 ? '1px solid rgb(251, 211, 141)' : 'none'
                                                                    }}
                                                                    title={`Importance: ${Math.round(importance * 100)}%`}
                                                                >
                                                                    {word.word}
                                                                </span>
                                                            );
                                                        })}
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    )}

                                    {/* Recommendation text analysis */}
                                    {explanation.textAnalysis.recommendation && (
                                        <div className="mb-6">
                                            <h5 className="font-medium mb-3">Recommendation Text Analysis</h5>

                                            {/* Original text display - using originalText field */}
                                            <div className="mb-4 p-4 bg-gray-50 border-l-4 border-gray-300 rounded">
                                                <h6 className="text-sm font-medium text-gray-700 mb-2">Original Text:</h6>
                                                <p className="text-gray-800">
                                                    {explanation.textAnalysis.recommendation.originalText ||
                                                        'No original text content'}
                                                </p>
                                            </div>

                                            <h6 className="text-sm font-medium text-gray-700 mb-3">Important Sentence Analysis:</h6>

                                            {explanation.textAnalysis.recommendation.sentences &&
                                                explanation.textAnalysis.recommendation.sentences.slice(0, 5).map((item: any, index: number) => {
                                                    // Calculate importance star rating
                                                    const importanceScore = item.score;
                                                    let stars = "★★★";
                                                    let importanceLabel = "Related";

                                                    if (importanceScore > 2.5) {
                                                        stars = "★★★★★";
                                                        importanceLabel = "Core";
                                                    } else if (importanceScore > 1.5) {
                                                        stars = "★★★★☆";
                                                        importanceLabel = "Very Important";
                                                    } else if (importanceScore > 1.0) {
                                                        stars = "★★★★";
                                                        importanceLabel = "Important";
                                                    }

                                                    // Determine if it's a core sentence based on index
                                                    const isCore = index < 3;

                                                    // Relevance label
                                                    let relevanceLabel = "Medium";
                                                    if (item.centrality > 0.8) relevanceLabel = "Very High";
                                                    else if (item.centrality > 0.6) relevanceLabel = "High";

                                                    return (
                                                        <div
                                                            key={index}
                                                            className={`mb-4 p-4 rounded shadow-sm ${isCore
                                                                ? 'bg-yellow-50 border border-yellow-200'
                                                                : 'bg-gray-50'
                                                                }`}
                                                        >
                                                            <div className="flex justify-between items-start mb-2">
                                                                <div>
                                                                    <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${isCore
                                                                        ? 'bg-yellow-200 text-yellow-800'
                                                                        : 'bg-gray-200 text-gray-700'
                                                                        }`}>
                                                                        {isCore ? `Core Sentence (${importanceLabel})` : `Important Sentence #${index + 1}`}
                                                                    </span>
                                                                    <span className="ml-2 text-yellow-500">{stars}</span>
                                                                </div>

                                                                <div className="text-xs text-gray-500">
                                                                    Theme Relevance: {relevanceLabel}
                                                                </div>
                                                            </div>

                                                            <p className={`text-gray-800 ${isCore ? 'font-medium' : ''}`}>
                                                                {item.text}
                                                            </p>

                                                            <div className="mt-2 flex space-x-2">
                                                                <div className="w-1/2">
                                                                    <div className="text-xs text-gray-500 mb-1">Importance</div>
                                                                    <div className="w-full bg-gray-200 rounded-full h-2">
                                                                        <div
                                                                            className={`h-2 rounded-full ${isCore ? 'bg-yellow-500' : 'bg-blue-500'}`}
                                                                            style={{ width: `${Math.min(importanceScore / 3 * 100, 100)}%` }}
                                                                        ></div>
                                                                    </div>
                                                                </div>

                                                                <div className="w-1/2">
                                                                    <div className="text-xs text-gray-500 mb-1">Theme Relevance</div>
                                                                    <div className="w-full bg-gray-200 rounded-full h-2">
                                                                        <div
                                                                            className="h-2 rounded-full bg-green-500"
                                                                            style={{ width: `${Math.min(item.centrality * 100, 100)}%` }}
                                                                        ></div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    );
                                                })}

                                            {explanation.textAnalysis.recommendation.importantWords && (
                                                <div className="mt-6 bg-white p-4 rounded-lg border border-gray-200">
                                                    <h6 className="text-sm font-medium text-gray-700 mb-3">Core Word Analysis</h6>
                                                    <div className="flex flex-wrap gap-2">
                                                        {explanation.textAnalysis.recommendation.importantWords.slice(0, 12).map((word: any, index: number) => {
                                                            // Calculate importance
                                                            const importance = Math.min(word.importance, 1.0);
                                                            const fontSize = 0.8 + (importance * 0.6);
                                                            const colorIntensity = Math.floor(40 + importance * 50);

                                                            return (
                                                                <span
                                                                    key={index}
                                                                    className="inline-block px-3 py-1.5 rounded-full"
                                                                    style={{
                                                                        fontSize: `${fontSize}rem`,
                                                                        fontWeight: importance > 0.6 ? 600 : 400,
                                                                        backgroundColor: `rgba(254, 242, 232, ${importance * 0.8 + 0.2})`,
                                                                        color: `hsl(22, ${colorIntensity}%, 40%)`,
                                                                        border: importance > 0.7 ? '1px solid rgb(251, 211, 141)' : 'none'
                                                                    }}
                                                                    title={`Importance: ${Math.round(importance * 100)}%`}
                                                                >
                                                                    {word.word}
                                                                </span>
                                                            );
                                                        })}
                                                    </div>
                                                </div>
                                            )}

                                            {/* If there's a semantic method description, show it */}
                                            {explanation.description && (
                                                <div className="mt-4 text-xs text-gray-500 bg-gray-50 p-2 rounded">
                                                    <p>{explanation.description}</p>
                                                </div>
                                            )}
                                        </div>
                                    )}
                                </div>
                            )}

                            {/* Model information */}
                            {explanation.method && (
                                <div className="mt-8 text-sm text-gray-500 border-t pt-4">
                                    <p>Explanation Method: {explanation.method}</p>
                                    {explanation.sampleCount && <p>Sample Count: {explanation.sampleCount}</p>}
                                    {explanation.rSquared && <p>Model Fit (R²): {explanation.rSquared.toFixed(4)}</p>}
                                    {explanation.generatedAt && <p>Generated Time: {new Date(explanation.generatedAt).toLocaleString()}</p>}
                                </div>
                            )}
                        </div>
                    ) : (
                        <div className="p-4 text-center">
                            <p className="text-gray-600">No available explanation analysis data</p>
                        </div>
                    )}
                </div>

                <div className="px-6 py-4 bg-gray-50 border-t flex justify-end">
                    <button
                        onClick={onClose}
                        className="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded transition"
                    >
                        Close
                    </button>
                </div>
            </div>
        </div>
    );
};

export default MistralExplanationModal;

// Translate feature names to display names
function translateFeatureName(feature: string) {
    const translations: Record<string, string> = {
        'revenueGrowth': 'Revenue Growth',
        'netIncomeGrowth': 'Net Income Growth',
        'currentRatio': 'Current Ratio',
        'debtToEquity': 'Debt to Equity',
        'returnOnEquity': 'Return on Equity',
        'peRatio': 'Price-to-Earnings Ratio',
        'priceToBookRatio': 'Price-to-Book Ratio',
        'dividendYield': 'Dividend Yield',
        'operatingMargin': 'Operating Margin',
        'netMargin': 'Net Margin'
    };

    return translations[feature] || feature;
} 